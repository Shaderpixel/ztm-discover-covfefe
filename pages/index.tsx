import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import heroImage from "/public/static/hero-image.png";
import Banner from "../component/banner";
import Card from "../component/card";
import { fetchCoffeeStores } from "../lib/coffee-store";
import { useTrackLocation } from "../hooks/use-track-location";
import React from "react";
import { ACTION_TYPES, StoreContext } from "../store/store-context";

export default function Home(props: Record<string, Record<string, string>[]>) {
	const { coffeeStores } = props;
	// const [clientCoffeeStores, setClientCoffeeStores] = React.useState(
	// 	[] as Record<string, string>[]
	// );
	const [clientCoffeeStoresError, setClientCoffeeStoresError] =
		React.useState("");
	const { locationErrorMsg, handleTrackLocation, isFindingLocation } =
		useTrackLocation();

	const { dispatch: contextDispatch, state: contextState } =
		React.useContext(StoreContext);
	const { coffeeStores: clientCoffeeStores, latLong } = contextState;

	// client-side rendering of stores near the user if latLong has been updated
	React.useEffect(() => {
		async function getClientCoffeeStores() {
			if (latLong) {
				try {
					const response = await fetch(
						`/api/getCoffeeStoresByLocation?latLong=${latLong}&limit=12`
					);
					const coffeeStores = await response.json();

					contextDispatch({
						type: ACTION_TYPES.SET_COFFEE_STORES,
						payload: { coffeeStores },
					});
					setClientCoffeeStoresError("");
				} catch (error: unknown) {
					// set error
					console.log({ error });
					setClientCoffeeStoresError(error.message);
				}
			}
		}

		getClientCoffeeStores();
	}, [contextDispatch, latLong]);
	console.log({ latLong, locationErrorMsg });

	const handleOnBannerBtnClick = () => {
		handleTrackLocation();
	};

	return (
		<div className={styles.container}>
			<Head>
				<title>Coffee Connoisseur</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>

			<main className={styles.main}>
				<div className={styles.heroContainer}>
					<Banner
						buttonText={
							isFindingLocation ? "Locating..." : "View stores nearby"
						}
						handleOnClick={handleOnBannerBtnClick}
					/>
					{locationErrorMsg && <p>Something went wrong: {locationErrorMsg}</p>}
					{clientCoffeeStoresError && (
						<p>Something went wrong: {clientCoffeeStoresError}</p>
					)}
					<Image
						className={styles.heroImage}
						src={heroImage}
						alt='illustration of person drinking coffee'
						placeholder='blur'
						width={700}
						height={400}
						fill={false}
					/>
					{clientCoffeeStores.length > 0 && (
						<div className={styles.regionWrapper}>
							<h2 className={styles.h2}>Stores near me</h2>
							<div className={styles.cardLayout}>
								{clientCoffeeStores.map((coffeeStore) => {
									return (
										<Card
											key={coffeeStore.id}
											className={styles.card}
											name={coffeeStore.name}
											imgUrl={
												coffeeStore.imgUrl ||
												"https://images.unsplash.com/photo-1498804103079-a6351b050096?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2468&q=80"
											}
											href={`coffee-store/${coffeeStore.id}`}
										/>
									);
								})}
							</div>
						</div>
					)}
					{coffeeStores.length > 0 && (
						<div className={styles.regionWrapper}>
							<h2 className={styles.h2}>Toronto stores</h2>
							<div className={styles.cardLayout}>
								{coffeeStores.map((coffeeStore) => {
									return (
										<Card
											key={coffeeStore.id}
											className={styles.card}
											name={coffeeStore.name}
											imgUrl={
												coffeeStore.imgUrl ||
												"https://images.unsplash.com/photo-1498804103079-a6351b050096?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2468&q=80"
											}
											href={`coffee-store/${coffeeStore.id}`}
										/>
									);
								})}
							</div>
						</div>
					)}
				</div>
			</main>

			<footer className={styles.footer}></footer>
		</div>
	);
}

export async function getStaticProps(context: unknown) {
	const coffeeStores = await fetchCoffeeStores();

	return {
		props: {
			coffeeStores,
		}, // will be passed to the page component as props
	};
}
